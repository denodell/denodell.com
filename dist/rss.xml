<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Den Odell’s Journal</title><description>Thoughts on building fast, accessible, and resilient frontends — drawn from years of real-world experience, a couple of books, and a lot of hard lessons. Expect deep dives, practical tips, a bit of history, and the occasional opinionated take on where the web is going.</description><link>https://denodell.com</link><item><title>Want to Be a Better Frontend Engineer? Try a Week On-Call</title><link>https://denodell.com/blog/undefined</link><guid isPermaLink="true">https://denodell.com/blog/undefined</guid><description>You’re going to hate me for saying this, but I actually like being on-call. Honestly! It’s taught me more about frontend quality than any bug tracker ever did.</description><content:encoded>&lt;p&gt;&lt;strong&gt;You’re going to hate me for saying this, but I actually like being on-call.&lt;/strong&gt;&lt;br /&gt;
I know. &lt;em&gt;I know.&lt;/em&gt; But hear me out.&lt;br /&gt;
Obviously not the part where PagerDuty yanks you out of a dream with your heart pounding.
But on-call taught me more about frontend quality than any bug tracker ever did.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It was 2:43 AM.&lt;br /&gt;
A customer couldn’t click through to checkout.&lt;br /&gt;
Revenue was on the line.&lt;br /&gt;
And the alert came to me.&lt;/p&gt;
&lt;p&gt;The root cause wasn’t in the frontend. A backend job had failed quietly, returning malformed data. But to the user, the result was simple: the button didn’t work. And when you’re on-call for the frontend, you’re the one who has to respond, no matter where the problem starts.&lt;/p&gt;
&lt;h2&gt;On-Call Sharpens What You Already Care About&lt;/h2&gt;
&lt;p&gt;I’ve always cared about quality.&lt;br /&gt;
I’ve written tests, chased down edge cases, and treated polish as part of the craft.&lt;br /&gt;
But on-call changes how you think about all of it.&lt;/p&gt;
&lt;p&gt;It’s not just about whether your code works.&lt;br /&gt;
It’s about how it fails.&lt;br /&gt;
It’s about how quickly it can be understood under pressure.&lt;br /&gt;
It’s about whether your interface can recover from issues far outside your control.&lt;/p&gt;
&lt;h2&gt;The Frontend Catches Everything&lt;/h2&gt;
&lt;p&gt;When something fails in the system, the user usually sees it in the frontend.&lt;br /&gt;
If a service goes down, your component gets no data.&lt;br /&gt;
If a token expires, the user gets stuck.&lt;br /&gt;
If a third-party script blocks rendering, your buttons stop working.&lt;br /&gt;
If checkout breaks, your app takes the blame.&lt;/p&gt;
&lt;p&gt;You may not control the systems upstream, but on-call teaches you that you still own the experience.&lt;/p&gt;
&lt;h2&gt;You Start Building for Real-World Failure&lt;/h2&gt;
&lt;p&gt;On-call shifts your habits.&lt;/p&gt;
&lt;p&gt;You write clearer loading states.&lt;br /&gt;
You handle empty, broken, or missing data.&lt;br /&gt;
You stop assuming things will behave.&lt;br /&gt;
You add useful logs. A &lt;em&gt;lot&lt;/em&gt; of them.&lt;br /&gt;
You recover from failure instead of hiding from it.&lt;/p&gt;
&lt;p&gt;You stop writing code that works in theory.&lt;br /&gt;
You start writing code that holds up at 2 AM.&lt;/p&gt;
&lt;p&gt;You begin asking better questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What happens if this API returns nothing?&lt;/li&gt;
&lt;li&gt;What if the feature flag system is down?&lt;/li&gt;
&lt;li&gt;Will this UI leave the user stranded if it doesn’t render properly?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;You Build Like You’re the One Who’ll Be Paged&lt;/h2&gt;
&lt;p&gt;Because you might be.&lt;/p&gt;
&lt;p&gt;On-call brings accountability.&lt;br /&gt;
You stop cutting corners you know might break later.&lt;br /&gt;
You stop leaving vague TODOs for someone else.&lt;br /&gt;
You stop letting “it works on my machine” be the final word.&lt;/p&gt;
&lt;p&gt;A single week of on-call teaches you what months of bug triage can’t.&lt;br /&gt;
It shows you what real-world pressure feels like, and how it exposes every weak spot in your stack.&lt;/p&gt;
&lt;p&gt;And once you’ve lived through that, you start building differently.&lt;br /&gt;
You start building better.&lt;/p&gt;
</content:encoded></item></channel></rss>