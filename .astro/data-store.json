[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.8.0","content-config-digest","dbb66f3f2d991be3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://denodell.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"never\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalLayout\":\"full-width\"},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":true,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"try-a-week-on-call",{"id":11,"data":13,"body":26,"filePath":27,"assetImports":28,"digest":30,"rendered":31},{"title":14,"description":15,"date":16,"author":17,"readingTime":18,"image":19,"tags":20,"slug":11,"devToSlug":25},"Want to Be a Better Frontend Engineer? Try a Week On-Call","You’re going to hate me for saying this, but I actually like being on-call. Honestly! It’s taught me more about frontend quality than any bug tracker ever did.",["Date","2025-06-04T13:00:00.000Z"],"Den Odell","3 min","__ASTRO_IMAGE_./try-a-week-on-call.png",[21,22,23,24],"frontend","engineering","oncall","codequality","want-to-be-a-better-frontend-engineer-try-a-week-on-call-40a5","**You’re going to hate me for saying this, but I actually like being on-call.**  \nI know. _I know._ But hear me out.  \nObviously not the part where PagerDuty yanks you out of a dream with your heart pounding.  \nBut on-call taught me more about frontend quality than any bug tracker ever did.\n\n***\n\nIt was 2:43 AM.  \nA customer couldn’t click through to checkout.  \nRevenue was on the line.  \nAnd the alert came to me.\n\nThe root cause wasn’t in the frontend. A backend job had failed quietly, returning malformed data. But to the user, the result was simple: the button didn’t work. And when you’re on-call for the frontend, you’re the one who has to respond, no matter where the problem starts.\n\n## On-Call Sharpens What You Already Care About\n\nI’ve always cared about quality.  \nI’ve written tests, chased down edge cases, and treated polish as part of the craft.  \nBut on-call changes how you think about all of it.\n\nIt’s not just about whether your code works.  \nIt’s about how it fails.  \nIt’s about how quickly it can be understood under pressure.  \nIt’s about whether your interface can recover from issues far outside your control.\n\n## The Frontend Catches Everything\n\nWhen something fails in the system, the user usually sees it in the frontend.  \nIf a service goes down, your component gets no data.  \nIf a token expires, the user gets stuck.  \nIf a third-party script blocks rendering, your buttons stop working.  \nIf checkout breaks, your app takes the blame.\n\nYou may not control the systems upstream, but on-call teaches you that you still own the experience.\n\n## You Start Building for Real-World Failure\n\nOn-call shifts your habits.\n\nYou write clearer loading states.  \nYou handle empty, broken, or missing data.  \nYou stop assuming things will behave.  \nYou add useful logs. A _lot_ of them.  \nYou recover from failure instead of hiding from it.\n\nYou stop writing code that works in theory.  \nYou start writing code that holds up at 2 AM.\n\nYou begin asking better questions:\n- What happens if this API returns nothing?\n- What if the feature flag system is down?\n- Will this UI leave the user stranded if it doesn’t render properly?\n\n## You Build Like You’re the One Who’ll Be Paged\n\nBecause you might be.\n\nOn-call brings accountability.  \nYou stop cutting corners you know might break later.  \nYou stop leaving vague TODOs for someone else.  \nYou stop letting “it works on my machine” be the final word.\n\nA single week of on-call teaches you what months of bug triage can’t.  \nIt shows you what real-world pressure feels like, and how it exposes every weak spot in your stack.\n\nAnd once you’ve lived through that, you start building differently.  \nYou start building better.","src/content/blog/try-a-week-on-call.md",[29],"./try-a-week-on-call.png","fa154974e04f8149",{"html":32,"metadata":33},"\u003Cp>\u003Cstrong>You’re going to hate me for saying this, but I actually like being on-call.\u003C/strong>\u003Cbr>\nI know. \u003Cem>I know.\u003C/em> But hear me out.\u003Cbr>\nObviously not the part where PagerDuty yanks you out of a dream with your heart pounding.\u003Cbr>\nBut on-call taught me more about frontend quality than any bug tracker ever did.\u003C/p>\n\u003Chr>\n\u003Cp>It was 2:43 AM.\u003Cbr>\nA customer couldn’t click through to checkout.\u003Cbr>\nRevenue was on the line.\u003Cbr>\nAnd the alert came to me.\u003C/p>\n\u003Cp>The root cause wasn’t in the frontend. A backend job had failed quietly, returning malformed data. But to the user, the result was simple: the button didn’t work. And when you’re on-call for the frontend, you’re the one who has to respond, no matter where the problem starts.\u003C/p>\n\u003Ch2 id=\"on-call-sharpens-what-you-already-care-about\">On-Call Sharpens What You Already Care About\u003C/h2>\n\u003Cp>I’ve always cared about quality.\u003Cbr>\nI’ve written tests, chased down edge cases, and treated polish as part of the craft.\u003Cbr>\nBut on-call changes how you think about all of it.\u003C/p>\n\u003Cp>It’s not just about whether your code works.\u003Cbr>\nIt’s about how it fails.\u003Cbr>\nIt’s about how quickly it can be understood under pressure.\u003Cbr>\nIt’s about whether your interface can recover from issues far outside your control.\u003C/p>\n\u003Ch2 id=\"the-frontend-catches-everything\">The Frontend Catches Everything\u003C/h2>\n\u003Cp>When something fails in the system, the user usually sees it in the frontend.\u003Cbr>\nIf a service goes down, your component gets no data.\u003Cbr>\nIf a token expires, the user gets stuck.\u003Cbr>\nIf a third-party script blocks rendering, your buttons stop working.\u003Cbr>\nIf checkout breaks, your app takes the blame.\u003C/p>\n\u003Cp>You may not control the systems upstream, but on-call teaches you that you still own the experience.\u003C/p>\n\u003Ch2 id=\"you-start-building-for-real-world-failure\">You Start Building for Real-World Failure\u003C/h2>\n\u003Cp>On-call shifts your habits.\u003C/p>\n\u003Cp>You write clearer loading states.\u003Cbr>\nYou handle empty, broken, or missing data.\u003Cbr>\nYou stop assuming things will behave.\u003Cbr>\nYou add useful logs. A \u003Cem>lot\u003C/em> of them.\u003Cbr>\nYou recover from failure instead of hiding from it.\u003C/p>\n\u003Cp>You stop writing code that works in theory.\u003Cbr>\nYou start writing code that holds up at 2 AM.\u003C/p>\n\u003Cp>You begin asking better questions:\u003C/p>\n\u003Cul>\n\u003Cli>What happens if this API returns nothing?\u003C/li>\n\u003Cli>What if the feature flag system is down?\u003C/li>\n\u003Cli>Will this UI leave the user stranded if it doesn’t render properly?\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"you-build-like-youre-the-one-wholl-be-paged\">You Build Like You’re the One Who’ll Be Paged\u003C/h2>\n\u003Cp>Because you might be.\u003C/p>\n\u003Cp>On-call brings accountability.\u003Cbr>\nYou stop cutting corners you know might break later.\u003Cbr>\nYou stop leaving vague TODOs for someone else.\u003Cbr>\nYou stop letting “it works on my machine” be the final word.\u003C/p>\n\u003Cp>A single week of on-call teaches you what months of bug triage can’t.\u003Cbr>\nIt shows you what real-world pressure feels like, and how it exposes every weak spot in your stack.\u003C/p>\n\u003Cp>And once you’ve lived through that, you start building differently.\u003Cbr>\nYou start building better.\u003C/p>",{"headings":34,"localImagePaths":48,"remoteImagePaths":49,"frontmatter":50,"imagePaths":53},[35,39,42,45],{"depth":36,"slug":37,"text":38},2,"on-call-sharpens-what-you-already-care-about","On-Call Sharpens What You Already Care About",{"depth":36,"slug":40,"text":41},"the-frontend-catches-everything","The Frontend Catches Everything",{"depth":36,"slug":43,"text":44},"you-start-building-for-real-world-failure","You Start Building for Real-World Failure",{"depth":36,"slug":46,"text":47},"you-build-like-youre-the-one-wholl-be-paged","You Build Like You’re the One Who’ll Be Paged",[],[],{"title":14,"description":15,"date":51,"author":17,"readingTime":18,"image":29,"tags":52,"slug":11,"devToSlug":25},["Date","2025-06-04T13:00:00.000Z"],[21,22,23,24],[]]