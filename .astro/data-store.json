[["Map",1,2,7,8,62,63],"meta::meta",["Map",3,4,5,6],"astro-version","5.8.0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://denodell.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","thought-leadership",["Map",9,10,35,36],"a-responsive-future",{"id":9,"data":11,"body":14,"filePath":15,"digest":16,"rendered":17,"legacyId":34},{"title":12,"date":13},"A Responsive Future","01-01-2013","Reproduced from TECH.review, 2013\n\n> The ultimate goal of Responsive design is to adapt to any user regardless of their browser, abilities or even their computer literacy\n    \nThese are exciting times to be a web developer. Increasingly, regular browser updates deliver improved web standards support, meaning we can build better user interfaces for our site visitors. As web technology evolves, new site build techniques, such as Responsive Design, are made possible.\n\nThis “one site fits all” technique uses [CSS Media Queries](https://web.archive.org/web/20141127164208/http://www.w3.org/TR/css3-mediaqueries/) to adapt our page design to the user’s browser – no unnecessary zooming or scrolling is required on their part. They also get a single URL for bookmarking both mobile and desktop versions of the same site.\n\nIt’s all about building a highly-accessible user interface.\n\nWe’re only just getting started using this technique, and I see a lot of potential to develop it in future to suit our needs and those of our visitors.\n\nFirst of all, we must overcome our current reliance on JavaScript: we can then evolve web standards to build sites that better adapt to our users’ needs and environments. Ultimately, there’s also an opportunity to meet the needs of new users by adapting our sites to work beyond the browser.\n\n## Overcoming our reliance on JavaScript\n\nCurrently, we’re using JavaScript to patch functionality lacking in HTML5 and CSS3. We need to use the right technology to build our sites, so that we have a solid foundation to build on in the future. Notably, because the \u003Ccode>&lt;img&gt;\u003C/code> tag is not up to the task of displaying Responsive in-page images that adapt based on media queries, we require a temporary solution such as the [picturefill polyfill](https://web.archive.org/web/20141127164208/https://github.com/scottjehl/picturefill) to do this. The draft W3C [&lt;picture&gt;](https://web.archive.org/web/20141127164208/http://www.w3.org/TR/html-picture-element/) element specification proposes a proper, mark-up-based solution to address this deficiency in HTML, however at the time of writing it is not supported in any currently-shipping browser version.\n                \nSimilarly, applying CSS styles to elements based on a browser’s scripting support currently requires a JavaScript-based solution, but the problem should really be solved within CSS. Thankfully, the emerging [CSS Level 4 Media Queries](https://web.archive.org/web/20141127164208/http://dev.w3.org/csswg/mediaqueries4/) specification proposes a new `script` media feature (enabled when the current page supports scripting) to address this problem.\n\nThis specification also promises the ability to alter applied page styles based on the size, type, and capabilities of the user’s input device. This means we could create larger target areas for users with touch-based input devices and smaller ones for those with a mouse or stylus.\n\nReducing our current reliance on JavaScript will allow us to build more reliable and accessible solutions for our users.\n\n## Evolving web standards\n\nWe need to ensure that web standards evolve to adapt content as well as design. We’ll need a solution for how we should handle secondary page content – the kind of text or advertising you might find in a sidebar, but only want loaded if the user’s browser is wider than a certain breakpoint, so mobile users who wouldn’t see it don’t download it. Using Ajax relies on JavaScript to solve what I see as the lack of an appropriate solution within HTML. We might evolve the &lt;link&gt; tag to point to secondary content at an external URL associated with a media attribute: the browser would only load content if it will be displayed.\n\n\u003Cpre>\u003Ccode class=\"language-xml\">\u003Cspan class=\"tag\">&lt;\u003Cspan class=\"title\">link\u003C/span> \u003Cspan class=\"attribute\">href\u003C/span>=\u003Cspan class=\"value\">\"secondary-content.html\"\u003C/span>\n\u003Cspan class=\"attribute\">id\u003C/span>=\u003Cspan class=\"value\">\"my-secondary-content\"\u003C/span>\n\u003Cspan class=\"attribute\">rel\u003C/span>=\u003Cspan class=\"value\">\"secondary\"\u003C/span>\n\u003Cspan class=\"attribute\">media\u003C/span>=\u003Cspan class=\"value\">\"(min-width: 40em)\"\u003C/span>&gt;\u003C/span>\n\n…\n\n\u003Cspan class=\"tag\">&lt;\u003Cspan class=\"title\">aside\u003C/span> \u003Cspan class=\"attribute\">content\u003C/span>=\u003Cspan class=\"value\">\"my-secondary-content\"\u003C/span>&gt;\u003C/span>\u003Cspan class=\"tag\">&lt;/\u003Cspan class=\"title\">aside\u003C/span>&gt;\u003C/span>\u003C/code>\u003C/pre>\n        \nHowever we solve the problem, web standards must continue to evolve to address more than design.\n\nThe proliferation of mobile devices with sensors capable of geolocation, orientation, direction and motion detection suggest to me a potential future wave of sites whose designs adapt to users’ real-world environments. Imagine being able to increase font sizes and button target areas if the motion sensor suggests the user is browsing while walking or running – and so might be struggling to read the page. We might consider adapting our layout based on our visitor’s geographic region or on ambient light or sound levels, such as in the following possible examples of future CSS media queries:\n\n\u003Cpre>\u003Ccode class=\"language-css\">\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (min-speed: \u003Cspan class=\"number\">5\u003C/span>m/s),\n@media (min-acceleration: \u003Cspan class=\"number\">5\u003C/span>m/s^\u003Cspan class=\"number\">2\u003C/span>) \u003C/span>{\n…\n}\n\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (region: Europe),\n@media (region: Asia) \u003C/span>{\n…\n}\n\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (min-ambient-sound-level: \u003Cspan class=\"number\">3\u003C/span>dB) \u003C/span>{\n…\n}\n\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (min-connection-speed: \u003Cspan class=\"number\">1\u003C/span>Mbps) \u003C/span>{\n…\n}\u003C/code>\u003C/pre>\n\n## Beyond the browser\n\nIf we want to build sites that are truly responsive to our users’ needs, we must separate our user interface from our site’s underlying services and data. This frees us up to tailor interfaces to completely different types of device. We have an exciting opportunity to use a voice server with [VoiceXML](https://web.archive.org/web/20141127164208/http://en.wikipedia.org/wiki/VoiceXML) mark-up – allowing the public to use their telephones to dial into our site and access its underlying services and data using only voice commands.\n\nThis would bring about a paradigm shift in accessibility, allowing site access without the prerequisite of an internet connection or the computer literacy skills usually required to browse the web. This concept forms the basis of the [W3C Multimodal Interaction](https://web.archive.org/web/20141127164208/http://www.w3.org/2002/mmi/) effort, a larger initiative for the web well worth reading about in detail.\n\nThe ultimate goal of Responsive design is to provide a site that adapts to any user regardless of their browser, device, abilities or even their computer literacy. We can progress this ‘one site fits all’ idea by continually evolving web standards, and addressing our users’ needs much more personally as we do so.\n\nThese are exciting times to be a web developer. I hope, like me, you’re looking forward to this vision of the future of Responsive design.","src/content/thought-leadership/a-responsive-future.md","2ba6e8212c381c87",{"html":18,"metadata":19},"\u003Cp>Reproduced from TECH.review, 2013\u003C/p>\n\u003Cblockquote>\n\u003Cp>The ultimate goal of Responsive design is to adapt to any user regardless of their browser, abilities or even their computer literacy\u003C/p>\n\u003C/blockquote>\n\u003Cp>These are exciting times to be a web developer. Increasingly, regular browser updates deliver improved web standards support, meaning we can build better user interfaces for our site visitors. As web technology evolves, new site build techniques, such as Responsive Design, are made possible.\u003C/p>\n\u003Cp>This “one site fits all” technique uses \u003Ca href=\"https://web.archive.org/web/20141127164208/http://www.w3.org/TR/css3-mediaqueries/\">CSS Media Queries\u003C/a> to adapt our page design to the user’s browser – no unnecessary zooming or scrolling is required on their part. They also get a single URL for bookmarking both mobile and desktop versions of the same site.\u003C/p>\n\u003Cp>It’s all about building a highly-accessible user interface.\u003C/p>\n\u003Cp>We’re only just getting started using this technique, and I see a lot of potential to develop it in future to suit our needs and those of our visitors.\u003C/p>\n\u003Cp>First of all, we must overcome our current reliance on JavaScript: we can then evolve web standards to build sites that better adapt to our users’ needs and environments. Ultimately, there’s also an opportunity to meet the needs of new users by adapting our sites to work beyond the browser.\u003C/p>\n\u003Ch2 id=\"overcoming-our-reliance-on-javascript\">Overcoming our reliance on JavaScript\u003C/h2>\n\u003Cp>Currently, we’re using JavaScript to patch functionality lacking in HTML5 and CSS3. We need to use the right technology to build our sites, so that we have a solid foundation to build on in the future. Notably, because the \u003Ccode>&#x3C;img>\u003C/code> tag is not up to the task of displaying Responsive in-page images that adapt based on media queries, we require a temporary solution such as the \u003Ca href=\"https://web.archive.org/web/20141127164208/https://github.com/scottjehl/picturefill\">picturefill polyfill\u003C/a> to do this. The draft W3C \u003Ca href=\"https://web.archive.org/web/20141127164208/http://www.w3.org/TR/html-picture-element/\">&#x3C;picture>\u003C/a> element specification proposes a proper, mark-up-based solution to address this deficiency in HTML, however at the time of writing it is not supported in any currently-shipping browser version.\u003C/p>\n\u003Cp>Similarly, applying CSS styles to elements based on a browser’s scripting support currently requires a JavaScript-based solution, but the problem should really be solved within CSS. Thankfully, the emerging \u003Ca href=\"https://web.archive.org/web/20141127164208/http://dev.w3.org/csswg/mediaqueries4/\">CSS Level 4 Media Queries\u003C/a> specification proposes a new \u003Ccode>script\u003C/code> media feature (enabled when the current page supports scripting) to address this problem.\u003C/p>\n\u003Cp>This specification also promises the ability to alter applied page styles based on the size, type, and capabilities of the user’s input device. This means we could create larger target areas for users with touch-based input devices and smaller ones for those with a mouse or stylus.\u003C/p>\n\u003Cp>Reducing our current reliance on JavaScript will allow us to build more reliable and accessible solutions for our users.\u003C/p>\n\u003Ch2 id=\"evolving-web-standards\">Evolving web standards\u003C/h2>\n\u003Cp>We need to ensure that web standards evolve to adapt content as well as design. We’ll need a solution for how we should handle secondary page content – the kind of text or advertising you might find in a sidebar, but only want loaded if the user’s browser is wider than a certain breakpoint, so mobile users who wouldn’t see it don’t download it. Using Ajax relies on JavaScript to solve what I see as the lack of an appropriate solution within HTML. We might evolve the &#x3C;link> tag to point to secondary content at an external URL associated with a media attribute: the browser would only load content if it will be displayed.\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-xml\">\u003Cspan class=\"tag\">&#x3C;\u003Cspan class=\"title\">link\u003C/span> \u003Cspan class=\"attribute\">href\u003C/span>=\u003Cspan class=\"value\">\"secondary-content.html\"\u003C/span>\n\u003Cspan class=\"attribute\">id\u003C/span>=\u003Cspan class=\"value\">\"my-secondary-content\"\u003C/span>\n\u003Cspan class=\"attribute\">rel\u003C/span>=\u003Cspan class=\"value\">\"secondary\"\u003C/span>\n\u003Cspan class=\"attribute\">media\u003C/span>=\u003Cspan class=\"value\">\"(min-width: 40em)\"\u003C/span>>\u003C/span>\n\n…\n\n\u003Cspan class=\"tag\">&#x3C;\u003Cspan class=\"title\">aside\u003C/span> \u003Cspan class=\"attribute\">content\u003C/span>=\u003Cspan class=\"value\">\"my-secondary-content\"\u003C/span>>\u003C/span>\u003Cspan class=\"tag\">&#x3C;/\u003Cspan class=\"title\">aside\u003C/span>>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>However we solve the problem, web standards must continue to evolve to address more than design.\u003C/p>\n\u003Cp>The proliferation of mobile devices with sensors capable of geolocation, orientation, direction and motion detection suggest to me a potential future wave of sites whose designs adapt to users’ real-world environments. Imagine being able to increase font sizes and button target areas if the motion sensor suggests the user is browsing while walking or running – and so might be struggling to read the page. We might consider adapting our layout based on our visitor’s geographic region or on ambient light or sound levels, such as in the following possible examples of future CSS media queries:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-css\">\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (min-speed: \u003Cspan class=\"number\">5\u003C/span>m/s),\n@media (min-acceleration: \u003Cspan class=\"number\">5\u003C/span>m/s^\u003Cspan class=\"number\">2\u003C/span>) \u003C/span>{\n…\n}\n\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (region: Europe),\n@media (region: Asia) \u003C/span>{\n…\n}\n\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (min-ambient-sound-level: \u003Cspan class=\"number\">3\u003C/span>dB) \u003C/span>{\n…\n}\n\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> (min-connection-speed: \u003Cspan class=\"number\">1\u003C/span>Mbps) \u003C/span>{\n…\n}\u003C/code>\u003C/pre>\n\u003Ch2 id=\"beyond-the-browser\">Beyond the browser\u003C/h2>\n\u003Cp>If we want to build sites that are truly responsive to our users’ needs, we must separate our user interface from our site’s underlying services and data. This frees us up to tailor interfaces to completely different types of device. We have an exciting opportunity to use a voice server with \u003Ca href=\"https://web.archive.org/web/20141127164208/http://en.wikipedia.org/wiki/VoiceXML\">VoiceXML\u003C/a> mark-up – allowing the public to use their telephones to dial into our site and access its underlying services and data using only voice commands.\u003C/p>\n\u003Cp>This would bring about a paradigm shift in accessibility, allowing site access without the prerequisite of an internet connection or the computer literacy skills usually required to browse the web. This concept forms the basis of the \u003Ca href=\"https://web.archive.org/web/20141127164208/http://www.w3.org/2002/mmi/\">W3C Multimodal Interaction\u003C/a> effort, a larger initiative for the web well worth reading about in detail.\u003C/p>\n\u003Cp>The ultimate goal of Responsive design is to provide a site that adapts to any user regardless of their browser, device, abilities or even their computer literacy. We can progress this ‘one site fits all’ idea by continually evolving web standards, and addressing our users’ needs much more personally as we do so.\u003C/p>\n\u003Cp>These are exciting times to be a web developer. I hope, like me, you’re looking forward to this vision of the future of Responsive design.\u003C/p>",{"headings":20,"localImagePaths":31,"remoteImagePaths":32,"frontmatter":11,"imagePaths":33},[21,25,28],{"depth":22,"slug":23,"text":24},2,"overcoming-our-reliance-on-javascript","Overcoming our reliance on JavaScript",{"depth":22,"slug":26,"text":27},"evolving-web-standards","Evolving web standards",{"depth":22,"slug":29,"text":30},"beyond-the-browser","Beyond the browser",[],[],[],"a-responsive-future.md","responsive-design-principles",{"id":35,"data":37,"body":39,"filePath":40,"digest":41,"rendered":42,"legacyId":61},{"title":38,"date":13},"Responsive Design Principles","Reproduced from TECH.review, 2013\n\n> Responsive design is made possible by browser support for CSS3 Media Queries\n\nA “Responsive” web page or site is one that adapts its visual layout to suit the characteristics of the device used to view it, most often by the screen’s aspect-ratio and/or resolution. The same page, with the same URL, viewed on both a mobile or desktop device would appear to the end user to have been designed to display best on that device, with font sizes and imagery scaled appropriately so the user doesn’t need to zoom or scroll around the page unnecessarily.\n\nIn this article, I will explain the three principles of Responsive design - media queries, breakpoints, and mobile-first development.\n\nThis type of Responsive layout is made possible by the support of [CSS3 Media Queries](https://web.archive.org/web/20160508064232/https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries) technology in web browsers – currently supported in [over 85% of browsers in use around the world](ttps://web.archive.org/web/20160508064232/http://caniuse.com/#feat=css-mediaqueries), the only notable exception being Microsoft’s Internet Explorer version 8 and below. Device characteristic detection, which feeds these media queries creating the desired layout, is handled within the browser itself and relies on no server-side component. Layouts typically scale to the full width of the browser’s viewport, with _breakpoints_ (the widths at which the layout needs to change) defined at specific screen widths so the page layout is grouped into small, medium, and large variants, typically corresponding to mobile-, tablet- and desktop-sized devices.\n\n## I’ve heard of ‘Adaptive’ design – what’s that?\n\n_Adaptive design_ is the process of using server-side technology to render alternative content and styling to a web page based on device type. A relevant stylesheet and/or markup can be sent to the browsing device dependent on its device characteristics, established by comparing its user agent string against a database (most commonly, [WURFL](https://web.archive.org/web/20160508064232/http://en.wikipedia.org/wiki/WURFL) of known features for that device.\n\nThe most important difference between Adaptive and Responsive design is that characteristic detection is handled on the server-side in the former technique, and within the browser in the latter.\n\n## Why should I adopt Responsive design?\n\nThere are a number of benefits to adopting the Responsive design practice, which benefit both end users and developers.\n\nEnd-users prefer Responsive layouts because:\n\n- Websites load the most appropriate layout for their device, regardless of screen size or resolution\n- No need to zoom or scroll horizontally around a page to locate hyperlinks and content when viewing a Responsive site on a mobile device\n- When reorienting the user’s mobile device (e.g. portrait to landscape), the page will immediately display appropriately according to the new device orientation\u003C\n- When resizing the user’s browser windows on their desktop screen, the layout of the site dynamically adapts to the new window size, giving them access to the site without unnecessary horizontal scrolling, allowing them to stack windows side-by-side in their operating system as they prefer\n- Uses the same URL for all devices, meaning synced bookmarks produce the same content regardless of browsing device – no need for complex redirects between \u003Ccode>m.\u003C/code> sites and their desktop equivalent\n\nWeb developers prefer constructing Responsive layouts because:\n\n- Code and content maintenance is simpler, as there is only a single set of code to manage.\u003C\nLess complex because no server-side solution is required to perform redirection based on a device’s user\n agent string – Responsive websites can even be coded in plain HTML and CSS without requiring any custom server-side code.\n - It adheres to standardised technologies, defined by the W3C, supported in the vast majority of web browsers\n - Single URL per page, which avoids the possibility of a search engine indexing two versions of the same site by their differing URLs\n - Layout is built once and adapts to any screen size, meaning that when new devices are launched with untested screen dimensions, such as phablets, they will just work - no need to add or update complex rules in a server-side component with the release of each new device (as with WURFL)\n \n## It’s time to adopt Responsive design… mobile-first\n\nI recommend all web pages and sites to be designed and built with Responsive layouts. This should be achieved in the majority of cases without relying on the server to generate alternative markup based on device type. There is still a place for server-side code in certain circumstances, for example to generate appropriately sized images for display based on the browser or device screen size. By utilising client-side code to adapt the site’s layout based on characteristics of the browser, any changes made by the user to the browser dimensions or other characteristics are reflected immediately in the site’s layout – something not possible with the server-side _adaptive_ technique.\n\nDevelopers should work _mobile-first_, building the styles for the smallest screen size breakpoint first  (usually for mobile devices, hence the name) and adding the extra styles for other breakpoints using CSS3 Media Queries. This focus on mobile reflects the huge growth in this area and the impending time at which more users will browse on mobile than on desktop. This approach has the added side-effect of giving mobile users with older devices, e.g. Blackberry, an appropriate mobile view of the page, despite them not supporting CSS Media Queries.\n\n## How do I do it? The Technical Notes for your Development Team\n\nCSS3 Media Queries allow us to write code to create Responsive websites, whose page design adjusts based on characteristics of the device used to view it. Using this technique, we’re able to adjust any CSS property based on screen width, height, pixel density, etc. While it’s possible to provide almost limitless differences in design based on every possible characteristic, in reality we tend to adjust the page based around three\ndifferent screen widths, and also pixel density – with the latter only really relevant for serving different background image files.\n \nThese three screen width ‘breakpoints’ split the design into ‘narrow’, ‘wide’, and ‘full’ layouts. While it might be tempting to describe these in terms of ‘smartphone’, ‘tablet’, and ‘desktop’, with a plethora of new devices released every year, we prefer to stick to non-device-specific terms. Between each breakpoint, the design should scale to fill the width of the browser, so that no matter what screen sized device is being used to browse the page, the page always looks as if it has been designed appropriately for that device.\n\nThe default CSS styles written for a site should be those for the ‘narrow’ size (i.e. ‘mobile-first’) and these should be written at the top of the CSS file, with any styles to be applied to the ‘wide’ or ‘full’ layouts to be added via CSS3 Media Queries. This means that any device incapable of comprehending Media Queries – most likely older-feature phones and smartphones – will be provided an appropriate experience.\n\nThe elephant in the room is OldIE (i.e. IE8 and below), which do not support Media Queries; we want to give these users the ‘full’ experience. In this case there are a couple of solutions, the best of which is [the approach detailed here by Jake Archibald](https://web.archive.org/web/20160508064232/http://jakearchibald.github.io/sass-ie/), providing you are using Sass to author your stylesheet files (which is preferred). Alternatively, a single additional CSS file could be produced for IE containing the styles from the ‘full’ Media Query, ideally produced dynamically based on code in the existing CSS file. Other solutions include [Respond.JS](https://web.archive.org/web/20160508064232/https://github.com/scottjehl/Respond), though it only patches support for a couple of Media Query types (thankfully, the most common ones) and its performance is not ideal.\n\nHere’s an example CSS file structure showing some basic styles applied to an element using the mobile-first approach:\n\n\u003Cpre>\u003Ccode class=\"language-css\">\u003Cspan class=\"comment\">/* 'narrow' and default styles go first */\u003C/span>\n\u003Cspan class=\"tag\">body\u003C/span> \u003Cspan class=\"rules\">{\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">100\u003C/span>%\u003C/span>\u003C/span>;\n\u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n\n\u003Cspan class=\"class\">.canvas\u003C/span> \u003Cspan class=\"rules\">{\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">position\u003C/span>:\u003Cspan class=\"value\"> absolute\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">top\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">0\u003C/span>\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">left\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">0\u003C/span>\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">border\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">2\u003C/span>px solid \u003Cspan class=\"hexcolor\">#000\u003C/span>\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">100\u003C/span>%\u003C/span>\u003C/span>;\n\u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n\n\u003Cspan class=\"comment\">/* Style rules to apply to screen sizes wider than 480px, overriding those set previously */\u003C/span>\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> only screen and (min-width: \u003Cspan class=\"number\">481\u003C/span>px) \u003C/span>{\n    \u003Cspan class=\"class\">.canvas\u003C/span> \u003Cspan class=\"rules\">{\n        \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">480\u003C/span>px\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n}\n\n\u003Cspan class=\"comment\">/* Style rules to apply to screen sizes wider than 468px, overriding those set previously */\u003C/span>\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> only screen and (min-width: \u003Cspan class=\"number\">769\u003C/span>px) \u003C/span>{\n    \u003Cspan class=\"class\">.canvas\u003C/span> \u003Cspan class=\"rules\">{\n        \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">768\u003C/span>px\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n}\u003C/code>\u003C/pre>\n\nNow I’ve covered the three principles behind the Responsive design technique – media queries, breakpoints, and mobile-first development – it’s time to dip your toes further into the waters of Responsive design. The following articles should help you do this:\n\n- [Responsive Web Design\u003C/a> by Ethan Marcotte](https://web.archive.org/web/20160508064232/http://alistapart.com/article/responsive-web-design)\n- [Responsive Web Design: What It Is And How To Use It](https://web.archive.org/web/20160508064232/http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/) by Kayla Knight\n- [Build A Basic Responsive Site With CSS](https://web.archive.org/web/20160508064232/http://www.creativebloq.com/responsive-web-design/build-basic-responsive-site-css-1132756) by Jason Michael\n- [Creating A Mobile-First Responsive Website](https://web.archive.org/web/20160508064232/http://www.html5rocks.com/en/mobile/responsivedesign/) by Brad Frost","src/content/thought-leadership/responsive-design-principles.md","fe0427af3afa48df",{"html":43,"metadata":44},"\u003Cp>Reproduced from TECH.review, 2013\u003C/p>\n\u003Cblockquote>\n\u003Cp>Responsive design is made possible by browser support for CSS3 Media Queries\u003C/p>\n\u003C/blockquote>\n\u003Cp>A “Responsive” web page or site is one that adapts its visual layout to suit the characteristics of the device used to view it, most often by the screen’s aspect-ratio and/or resolution. The same page, with the same URL, viewed on both a mobile or desktop device would appear to the end user to have been designed to display best on that device, with font sizes and imagery scaled appropriately so the user doesn’t need to zoom or scroll around the page unnecessarily.\u003C/p>\n\u003Cp>In this article, I will explain the three principles of Responsive design - media queries, breakpoints, and mobile-first development.\u003C/p>\n\u003Cp>This type of Responsive layout is made possible by the support of \u003Ca href=\"https://web.archive.org/web/20160508064232/https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries\">CSS3 Media Queries\u003C/a> technology in web browsers – currently supported in \u003Ca href=\"ttps://web.archive.org/web/20160508064232/http://caniuse.com/#feat=css-mediaqueries\">over 85% of browsers in use around the world\u003C/a>, the only notable exception being Microsoft’s Internet Explorer version 8 and below. Device characteristic detection, which feeds these media queries creating the desired layout, is handled within the browser itself and relies on no server-side component. Layouts typically scale to the full width of the browser’s viewport, with \u003Cem>breakpoints\u003C/em> (the widths at which the layout needs to change) defined at specific screen widths so the page layout is grouped into small, medium, and large variants, typically corresponding to mobile-, tablet- and desktop-sized devices.\u003C/p>\n\u003Ch2 id=\"ive-heard-of-adaptive-design--whats-that\">I’ve heard of ‘Adaptive’ design – what’s that?\u003C/h2>\n\u003Cp>\u003Cem>Adaptive design\u003C/em> is the process of using server-side technology to render alternative content and styling to a web page based on device type. A relevant stylesheet and/or markup can be sent to the browsing device dependent on its device characteristics, established by comparing its user agent string against a database (most commonly, \u003Ca href=\"https://web.archive.org/web/20160508064232/http://en.wikipedia.org/wiki/WURFL\">WURFL\u003C/a> of known features for that device.\u003C/p>\n\u003Cp>The most important difference between Adaptive and Responsive design is that characteristic detection is handled on the server-side in the former technique, and within the browser in the latter.\u003C/p>\n\u003Ch2 id=\"why-should-i-adopt-responsive-design\">Why should I adopt Responsive design?\u003C/h2>\n\u003Cp>There are a number of benefits to adopting the Responsive design practice, which benefit both end users and developers.\u003C/p>\n\u003Cp>End-users prefer Responsive layouts because:\u003C/p>\n\u003Cul>\n\u003Cli>Websites load the most appropriate layout for their device, regardless of screen size or resolution\u003C/li>\n\u003Cli>No need to zoom or scroll horizontally around a page to locate hyperlinks and content when viewing a Responsive site on a mobile device\u003C/li>\n\u003Cli>When reorienting the user’s mobile device (e.g. portrait to landscape), the page will immediately display appropriately according to the new device orientation&#x3C;\u003C/li>\n\u003Cli>When resizing the user’s browser windows on their desktop screen, the layout of the site dynamically adapts to the new window size, giving them access to the site without unnecessary horizontal scrolling, allowing them to stack windows side-by-side in their operating system as they prefer\u003C/li>\n\u003Cli>Uses the same URL for all devices, meaning synced bookmarks produce the same content regardless of browsing device – no need for complex redirects between \u003Ccode>m.\u003C/code> sites and their desktop equivalent\u003C/li>\n\u003C/ul>\n\u003Cp>Web developers prefer constructing Responsive layouts because:\u003C/p>\n\u003Cul>\n\u003Cli>Code and content maintenance is simpler, as there is only a single set of code to manage.&#x3C;\nLess complex because no server-side solution is required to perform redirection based on a device’s user\nagent string – Responsive websites can even be coded in plain HTML and CSS without requiring any custom server-side code.\u003C/li>\n\u003Cli>It adheres to standardised technologies, defined by the W3C, supported in the vast majority of web browsers\u003C/li>\n\u003Cli>Single URL per page, which avoids the possibility of a search engine indexing two versions of the same site by their differing URLs\u003C/li>\n\u003Cli>Layout is built once and adapts to any screen size, meaning that when new devices are launched with untested screen dimensions, such as phablets, they will just work - no need to add or update complex rules in a server-side component with the release of each new device (as with WURFL)\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"its-time-to-adopt-responsive-design-mobile-first\">It’s time to adopt Responsive design… mobile-first\u003C/h2>\n\u003Cp>I recommend all web pages and sites to be designed and built with Responsive layouts. This should be achieved in the majority of cases without relying on the server to generate alternative markup based on device type. There is still a place for server-side code in certain circumstances, for example to generate appropriately sized images for display based on the browser or device screen size. By utilising client-side code to adapt the site’s layout based on characteristics of the browser, any changes made by the user to the browser dimensions or other characteristics are reflected immediately in the site’s layout – something not possible with the server-side \u003Cem>adaptive\u003C/em> technique.\u003C/p>\n\u003Cp>Developers should work \u003Cem>mobile-first\u003C/em>, building the styles for the smallest screen size breakpoint first  (usually for mobile devices, hence the name) and adding the extra styles for other breakpoints using CSS3 Media Queries. This focus on mobile reflects the huge growth in this area and the impending time at which more users will browse on mobile than on desktop. This approach has the added side-effect of giving mobile users with older devices, e.g. Blackberry, an appropriate mobile view of the page, despite them not supporting CSS Media Queries.\u003C/p>\n\u003Ch2 id=\"how-do-i-do-it-the-technical-notes-for-your-development-team\">How do I do it? The Technical Notes for your Development Team\u003C/h2>\n\u003Cp>CSS3 Media Queries allow us to write code to create Responsive websites, whose page design adjusts based on characteristics of the device used to view it. Using this technique, we’re able to adjust any CSS property based on screen width, height, pixel density, etc. While it’s possible to provide almost limitless differences in design based on every possible characteristic, in reality we tend to adjust the page based around three\ndifferent screen widths, and also pixel density – with the latter only really relevant for serving different background image files.\u003C/p>\n\u003Cp>These three screen width ‘breakpoints’ split the design into ‘narrow’, ‘wide’, and ‘full’ layouts. While it might be tempting to describe these in terms of ‘smartphone’, ‘tablet’, and ‘desktop’, with a plethora of new devices released every year, we prefer to stick to non-device-specific terms. Between each breakpoint, the design should scale to fill the width of the browser, so that no matter what screen sized device is being used to browse the page, the page always looks as if it has been designed appropriately for that device.\u003C/p>\n\u003Cp>The default CSS styles written for a site should be those for the ‘narrow’ size (i.e. ‘mobile-first’) and these should be written at the top of the CSS file, with any styles to be applied to the ‘wide’ or ‘full’ layouts to be added via CSS3 Media Queries. This means that any device incapable of comprehending Media Queries – most likely older-feature phones and smartphones – will be provided an appropriate experience.\u003C/p>\n\u003Cp>The elephant in the room is OldIE (i.e. IE8 and below), which do not support Media Queries; we want to give these users the ‘full’ experience. In this case there are a couple of solutions, the best of which is \u003Ca href=\"https://web.archive.org/web/20160508064232/http://jakearchibald.github.io/sass-ie/\">the approach detailed here by Jake Archibald\u003C/a>, providing you are using Sass to author your stylesheet files (which is preferred). Alternatively, a single additional CSS file could be produced for IE containing the styles from the ‘full’ Media Query, ideally produced dynamically based on code in the existing CSS file. Other solutions include \u003Ca href=\"https://web.archive.org/web/20160508064232/https://github.com/scottjehl/Respond\">Respond.JS\u003C/a>, though it only patches support for a couple of Media Query types (thankfully, the most common ones) and its performance is not ideal.\u003C/p>\n\u003Cp>Here’s an example CSS file structure showing some basic styles applied to an element using the mobile-first approach:\u003C/p>\n\u003Cpre>\u003Ccode class=\"language-css\">\u003Cspan class=\"comment\">/* 'narrow' and default styles go first */\u003C/span>\n\u003Cspan class=\"tag\">body\u003C/span> \u003Cspan class=\"rules\">{\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">100\u003C/span>%\u003C/span>\u003C/span>;\n\u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n\n\u003Cspan class=\"class\">.canvas\u003C/span> \u003Cspan class=\"rules\">{\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">position\u003C/span>:\u003Cspan class=\"value\"> absolute\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">top\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">0\u003C/span>\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">left\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">0\u003C/span>\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">border\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">2\u003C/span>px solid \u003Cspan class=\"hexcolor\">#000\u003C/span>\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">100\u003C/span>%\u003C/span>\u003C/span>;\n\u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n\n\u003Cspan class=\"comment\">/* Style rules to apply to screen sizes wider than 480px, overriding those set previously */\u003C/span>\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> only screen and (min-width: \u003Cspan class=\"number\">481\u003C/span>px) \u003C/span>{\n    \u003Cspan class=\"class\">.canvas\u003C/span> \u003Cspan class=\"rules\">{\n        \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">480\u003C/span>px\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n}\n\n\u003Cspan class=\"comment\">/* Style rules to apply to screen sizes wider than 468px, overriding those set previously */\u003C/span>\n\u003Cspan class=\"at_rule\">@\u003Cspan class=\"keyword\">media\u003C/span> only screen and (min-width: \u003Cspan class=\"number\">769\u003C/span>px) \u003C/span>{\n    \u003Cspan class=\"class\">.canvas\u003C/span> \u003Cspan class=\"rules\">{\n        \u003Cspan class=\"rule\">\u003Cspan class=\"attribute\">width\u003C/span>:\u003Cspan class=\"value\"> \u003Cspan class=\"number\">768\u003C/span>px\u003C/span>\u003C/span>;\n    \u003Cspan class=\"rule\">}\u003C/span>\u003C/span>\n}\u003C/code>\u003C/pre>\n\u003Cp>Now I’ve covered the three principles behind the Responsive design technique – media queries, breakpoints, and mobile-first development – it’s time to dip your toes further into the waters of Responsive design. The following articles should help you do this:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://web.archive.org/web/20160508064232/http://alistapart.com/article/responsive-web-design\">Responsive Web Design\u003C/a> by Ethan Marcotte\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.archive.org/web/20160508064232/http://coding.smashingmagazine.com/2011/01/12/guidelines-for-responsive-web-design/\">Responsive Web Design: What It Is And How To Use It\u003C/a> by Kayla Knight\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.archive.org/web/20160508064232/http://www.creativebloq.com/responsive-web-design/build-basic-responsive-site-css-1132756\">Build A Basic Responsive Site With CSS\u003C/a> by Jason Michael\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.archive.org/web/20160508064232/http://www.html5rocks.com/en/mobile/responsivedesign/\">Creating A Mobile-First Responsive Website\u003C/a> by Brad Frost\u003C/li>\n\u003C/ul>",{"headings":45,"localImagePaths":58,"remoteImagePaths":59,"frontmatter":37,"imagePaths":60},[46,49,52,55],{"depth":22,"slug":47,"text":48},"ive-heard-of-adaptive-design--whats-that","I’ve heard of ‘Adaptive’ design – what’s that?",{"depth":22,"slug":50,"text":51},"why-should-i-adopt-responsive-design","Why should I adopt Responsive design?",{"depth":22,"slug":53,"text":54},"its-time-to-adopt-responsive-design-mobile-first","It’s time to adopt Responsive design… mobile-first",{"depth":22,"slug":56,"text":57},"how-do-i-do-it-the-technical-notes-for-your-development-team","How do I do it? The Technical Notes for your Development Team",[],[],[],"responsive-design-principles.md","journal",["Map",64,65],"on-call-for-frontend-engineers",{"id":64,"data":66,"body":78,"filePath":79,"digest":80,"rendered":81,"legacyId":100},{"title":67,"description":68,"date":69,"author":70,"readingTime":71,"tags":72,"slug":64},"Want to Be a Better Frontend Engineer? Try a Week On-Call","You’re going to hate me for saying this, but I actually like being on-call. Honestly! It’s taught me more about frontend quality than any bug tracker ever did.",["Date","2025-06-03T00:00:00.000Z"],"Den Odell","3 min",[73,74,75,76,77],"frontend","engineering","on-call","quality","career","**You’re going to hate me for saying this, but I actually like being on-call.**  \nI know. _I know._ But hear me out.   \nObviously not the part where PagerDuty yanks you out of a dream with your heart pounding.\nBut on-call taught me more about frontend quality than any bug tracker ever did.\n\n***\n\nIt was 2:43 AM.  \nA customer couldn’t click through to checkout.  \nRevenue was on the line.  \nAnd the alert came to me.\n\nThe root cause wasn’t in the frontend. A backend job had failed quietly, returning malformed data. But to the user, the result was simple: the button didn’t work. And when you’re on-call for the frontend, you’re the one who has to respond, no matter where the problem starts.\n\n## On-Call Sharpens What You Already Care About\n\nI’ve always cared about quality.  \nI’ve written tests, chased down edge cases, and treated polish as part of the craft.  \nBut on-call changes how you think about all of it.\n\nIt’s not just about whether your code works.  \nIt’s about how it fails.  \nIt’s about how quickly it can be understood under pressure.  \nIt’s about whether your interface can recover from issues far outside your control.\n\n## The Frontend Catches Everything\n\nWhen something fails in the system, the user usually sees it in the frontend.  \nIf a service goes down, your component gets no data.  \nIf a token expires, the user gets stuck.  \nIf a third-party script blocks rendering, your buttons stop working.  \nIf checkout breaks, your app takes the blame.\n\nYou may not control the systems upstream, but on-call teaches you that you still own the experience.\n\n## You Start Building for Real-World Failure\n\nOn-call shifts your habits.\n\nYou write clearer loading states.  \nYou handle empty, broken, or missing data.  \nYou stop assuming things will behave.  \nYou add useful logs. A _lot_ of them.  \nYou recover from failure instead of hiding from it.\n\nYou stop writing code that works in theory.  \nYou start writing code that holds up at 2 AM.\n\nYou begin asking better questions:\n- What happens if this API returns nothing?\n- What if the feature flag system is down?\n- Will this UI leave the user stranded if it doesn’t render properly?\n\n## You Build Like You’re the One Who’ll Be Paged\n\nBecause you might be.\n\nOn-call brings accountability.  \nYou stop cutting corners you know might break later.  \nYou stop leaving vague TODOs for someone else.  \nYou stop letting “it works on my machine” be the final word.\n\nA single week of on-call teaches you what months of bug triage can’t.  \nIt shows you what real-world pressure feels like, and how it exposes every weak spot in your stack.\n\nAnd once you’ve lived through that, you start building differently.  \nYou start building better.","src/content/journal/try-a-week-on-call.md","288173414a5fe6f6",{"html":82,"metadata":83},"\u003Cp>\u003Cstrong>You’re going to hate me for saying this, but I actually like being on-call.\u003C/strong>\u003Cbr>\nI know. \u003Cem>I know.\u003C/em> But hear me out.\u003Cbr>\nObviously not the part where PagerDuty yanks you out of a dream with your heart pounding.\nBut on-call taught me more about frontend quality than any bug tracker ever did.\u003C/p>\n\u003Chr>\n\u003Cp>It was 2:43 AM.\u003Cbr>\nA customer couldn’t click through to checkout.\u003Cbr>\nRevenue was on the line.\u003Cbr>\nAnd the alert came to me.\u003C/p>\n\u003Cp>The root cause wasn’t in the frontend. A backend job had failed quietly, returning malformed data. But to the user, the result was simple: the button didn’t work. And when you’re on-call for the frontend, you’re the one who has to respond, no matter where the problem starts.\u003C/p>\n\u003Ch2 id=\"on-call-sharpens-what-you-already-care-about\">On-Call Sharpens What You Already Care About\u003C/h2>\n\u003Cp>I’ve always cared about quality.\u003Cbr>\nI’ve written tests, chased down edge cases, and treated polish as part of the craft.\u003Cbr>\nBut on-call changes how you think about all of it.\u003C/p>\n\u003Cp>It’s not just about whether your code works.\u003Cbr>\nIt’s about how it fails.\u003Cbr>\nIt’s about how quickly it can be understood under pressure.\u003Cbr>\nIt’s about whether your interface can recover from issues far outside your control.\u003C/p>\n\u003Ch2 id=\"the-frontend-catches-everything\">The Frontend Catches Everything\u003C/h2>\n\u003Cp>When something fails in the system, the user usually sees it in the frontend.\u003Cbr>\nIf a service goes down, your component gets no data.\u003Cbr>\nIf a token expires, the user gets stuck.\u003Cbr>\nIf a third-party script blocks rendering, your buttons stop working.\u003Cbr>\nIf checkout breaks, your app takes the blame.\u003C/p>\n\u003Cp>You may not control the systems upstream, but on-call teaches you that you still own the experience.\u003C/p>\n\u003Ch2 id=\"you-start-building-for-real-world-failure\">You Start Building for Real-World Failure\u003C/h2>\n\u003Cp>On-call shifts your habits.\u003C/p>\n\u003Cp>You write clearer loading states.\u003Cbr>\nYou handle empty, broken, or missing data.\u003Cbr>\nYou stop assuming things will behave.\u003Cbr>\nYou add useful logs. A \u003Cem>lot\u003C/em> of them.\u003Cbr>\nYou recover from failure instead of hiding from it.\u003C/p>\n\u003Cp>You stop writing code that works in theory.\u003Cbr>\nYou start writing code that holds up at 2 AM.\u003C/p>\n\u003Cp>You begin asking better questions:\u003C/p>\n\u003Cul>\n\u003Cli>What happens if this API returns nothing?\u003C/li>\n\u003Cli>What if the feature flag system is down?\u003C/li>\n\u003Cli>Will this UI leave the user stranded if it doesn’t render properly?\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"you-build-like-youre-the-one-wholl-be-paged\">You Build Like You’re the One Who’ll Be Paged\u003C/h2>\n\u003Cp>Because you might be.\u003C/p>\n\u003Cp>On-call brings accountability.\u003Cbr>\nYou stop cutting corners you know might break later.\u003Cbr>\nYou stop leaving vague TODOs for someone else.\u003Cbr>\nYou stop letting “it works on my machine” be the final word.\u003C/p>\n\u003Cp>A single week of on-call teaches you what months of bug triage can’t.\u003Cbr>\nIt shows you what real-world pressure feels like, and how it exposes every weak spot in your stack.\u003C/p>\n\u003Cp>And once you’ve lived through that, you start building differently.\u003Cbr>\nYou start building better.\u003C/p>",{"headings":84,"localImagePaths":97,"remoteImagePaths":98,"frontmatter":66,"imagePaths":99},[85,88,91,94],{"depth":22,"slug":86,"text":87},"on-call-sharpens-what-you-already-care-about","On-Call Sharpens What You Already Care About",{"depth":22,"slug":89,"text":90},"the-frontend-catches-everything","The Frontend Catches Everything",{"depth":22,"slug":92,"text":93},"you-start-building-for-real-world-failure","You Start Building for Real-World Failure",{"depth":22,"slug":95,"text":96},"you-build-like-youre-the-one-wholl-be-paged","You Build Like You’re the One Who’ll Be Paged",[],[],[],"try-a-week-on-call.md"]